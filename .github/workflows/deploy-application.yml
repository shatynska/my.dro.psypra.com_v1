name: Deploy Application

on:
  push:
    branches:
      - main

env:
  SERVER_NAME: server
  SERVER_HOST: 185.233.36.64
  SERVER_USERNAME: root
  SERVER_PORT: 22
  SERVER_PATH: /var/www/dro.psypra.com/my.dro.psypra.com/green

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Compile CSS and Javascript
        run: npm install
          npm run build

      - name: Configure php 8.1
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.1
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Install Composer dependencies
        run: composer install --optimize-autoloader --no-dev

      # - name: Add production .env file
      #   env:
      #     LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
      #   run: printf "%s" "$LARAVEL_ENV" > ".env"

      # - name: Optimizing Configuration Loading
      #   run: php artisan config:cache

      - name: Optimizing Route Loading
        run: php artisan route:cache

      - name: Optimizing View Loading
        run: php artisan view:cache

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules --exclude=tests *

      - name: Store artifact for destribution
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz
          retention-days: 1

  prepare-release-on-servers:
    name: "Prepare release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ env.SERVER_PATH }}/artifacts
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ env.SERVER_PATH }}/releases/${GITHUB_SHA}"
            tar xzf ${{ env.SERVER_PATH }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ env.SERVER_PATH }}/releases/${GITHUB_SHA}"
            mkdir -p ${{ env.SERVER_PATH }}/storage/{app,public,framework,logs}
            mkdir -p ${{ env.SERVER_PATH }}/storage/framework/{cache,sessions,testing,views}
            chmod -R 0777 ${{ env.SERVER_PATH }}/storage

  run-before-hooks:
    name: "Before hook"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifacts, prepare-release-on-servers]
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ env.SERVER_PATH }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ env.SERVER_PATH }}/current
          STORAGE_PATH: ${{ env.SERVER_PATH }}/storage
          BASE_PATH: ${{ env.SERVER_PATH }}
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            chmod -R 0777 ${RELEASE_PATH}/storage

  run-after-hooks:
    name: "After hook"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
      ]
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ env.SERVER_PATH }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ env.SERVER_PATH }}/current
          STORAGE_PATH: ${{ env.SERVER_PATH }}/storage
          BASE_PATH: ${{ env.SERVER_PATH }}
          DB_CONNECTION: mysql
          DB_HOST: db
          DB_DATABASE: my_dro
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: root
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,DB_CONNECTION,DB_HOST,DB_DATABASE,DB_PORT,DB_USER,DB_PASSWORD
          script:

  activate-release:
    name: "Activate release"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
        run-after-hooks,
      ]
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ env.SERVER_PATH }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ env.SERVER_PATH }}/current
          STORAGE_PATH: ${{ env.SERVER_PATH }}/storage
          BASE_PATH: ${{ env.SERVER_PATH }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH,LARAVEL_ENV
          script: |
            printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
            ln -s -f ../../.env $RELEASE_PATH
            rm -r $RELEASE_PATH/storage
            ln -s -f ../../storage $RELEASE_PATH
            ln -s -n -f ./releases/${{ github.sha }} $ACTIVE_RELEASE_PATH

  clean-up:
    name: "Clean up"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
        run-after-hooks,
        activate-release,
      ]
    steps:
      - name: Clean up
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ env.SERVER_PATH }}/releases
          ARTIFACTS_PATH: ${{ env.SERVER_PATH }}/artifacts
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ env.SERVER_PORT }}
          envs: RELEASES_PATH,ARTIFACTS_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
